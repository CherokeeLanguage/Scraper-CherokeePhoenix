package com.cherokeelessons.com.scraper.phoenix.db;

import java.io.File;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.h2.jdbcx.JdbcConnectionPool;
import org.jdbi.v3.core.ConnectionFactory;
import org.jdbi.v3.core.Jdbi;
import org.jdbi.v3.core.h2.H2DatabasePlugin;
import org.jdbi.v3.sqlobject.SqlObjectPlugin;
import org.jdbi.v3.sqlobject.customizer.Bind;
import org.jdbi.v3.sqlobject.statement.SqlBatch;
import org.jdbi.v3.sqlobject.statement.SqlQuery;
import org.jdbi.v3.sqlobject.statement.SqlScript;
import org.jdbi.v3.sqlobject.statement.SqlUpdate;

public interface CacheDao {
	static String TABLE_HTML = "phoenix_html";
	static String TABLE_PDF = "phoenix_pdf";

	@SqlQuery("select url from " + TABLE_HTML + " where" //
			+ " html is NULL")
	List<String> forRescraping();

	@SqlUpdate("update " + TABLE_HTML //
			+ " set html = NULL" //
			+ " where" //
			+ " html like" //
			+ " '%<title>Cherokee Nation Site Unavailable</title>%'" + " OR " //
			+ " html like" //
			+ " '%error on the server%" //
			+ "Please try again later%'")
	void resetMaybeBadScrapes();

	@SqlUpdate("insert into " + TABLE_HTML + " (url, html) values (:url, :html)")
	void insertUrlWithHtml(@Bind("url") String url, @Bind("html") String html);

	@SqlUpdate("delete from " + TABLE_HTML + " where url=:url")
	void deleteByUrl(@Bind("url") String url);

	default void putHtml(String url, String html) {
		synchronized (CacheDao.class) {
			deleteByUrl(url);
			insertUrlWithHtml(url, html);
		}
	}

	@SqlQuery("select html from " + TABLE_HTML + " where url=:url")
	String getHtml(@Bind("url") String url);

	@SqlQuery("select count(*)!=0 from " + TABLE_HTML + " where url=:url")
	boolean containsUrl(@Bind("url") String url);

	@SqlQuery("select max(modified) from " + TABLE_HTML)
	Date modified();

	@SqlQuery("select timestampdiff('HOUR',NOW(),max(modified))<4 from " + TABLE_HTML)
	boolean isRecent();

	@SqlQuery("select url from " + TABLE_HTML + " where modified>=:oldest")
	List<String> urlsNewerThan(@Bind("oldest") Date oldest);

	@SqlQuery("select url from " + TABLE_HTML)
	List<String> getUrls();

	default int getMaxArticleId() {
		int maxId = 0;
		List<String> urls = getUrls();
		for (String url : urls) {
			String id = StringUtils.substringAfterLast(url, "/");
			try {
				maxId = Math.max(maxId, Integer.valueOf(id));
			} catch (NumberFormatException e) {
			}
		}
		return maxId;
	}

	@SqlQuery("select max(modified) from " + TABLE_HTML)
	Date getMaxDate();

	@SqlScript("create CACHED table if not exists " + TABLE_HTML //
			+ "(id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," //
			+ " status INTEGER DEFAULT 0," //
			+ " url VARCHAR(254) DEFAULT ''," //
			+ " html CLOB(64M) DEFAULT null," //
			+ " modified TIMESTAMP AS CURRENT_TIMESTAMP)")
	@SqlScript("create INDEX if not exists " + TABLE_HTML + "_url on " + TABLE_HTML + "(url)")
	@SqlScript("create INDEX if not exists " + TABLE_HTML + "_modified on " + TABLE_HTML + "(modified)")
	@SqlScript("create CACHED table if not exists " + TABLE_PDF //
			+ "(id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," //
			+ " url VARCHAR(254) DEFAULT ''," //
			+ " cherokee INTEGER DEFAULT NULL," //
			+ " modified TIMESTAMP AS CURRENT_TIMESTAMP,"
			+ " created DATETIME DEFAULT NULL)")
	@SqlScript("create INDEX if not exists " + TABLE_PDF + "_url on " + TABLE_PDF + "(url)")
	@SqlScript("create INDEX if not exists " + TABLE_PDF + "_cherokee on " + TABLE_PDF + "(cherokee)")
	void init();
	
	@SqlBatch("insert into " + TABLE_PDF //
			+ " (url, created) select *"
			+ " from (select cast(:url AS VARCHAR), NOW()) X"
			+ " where not exists"
			+ " (select cast(:url AS VARCHAR) from "+TABLE_PDF //
			+" where url=cast(:url AS VARCHAR))")
	void insertPdfUrl(@Bind("url") String url);
	
	@SqlBatch("insert into " + TABLE_PDF //
			+ " (url, created) select *"
			+ " from (select cast(:url AS VARCHAR), NOW()) X"
			+ " where not exists"
			+ " (select cast(:url AS VARCHAR) from "+TABLE_PDF //
			+" where url=cast(:url AS VARCHAR))")
	void insertPdfUrl(@Bind("url") Iterable<String> urls);
	
	@SqlUpdate("update " + TABLE_PDF + " set cherokee=:cherokee where url=:url")
	void updatePdfUrl(@Bind("url") String url, @Bind("cherokee") boolean cherokee);
	
	@SqlQuery("select url from "+TABLE_PDF)
	List<String> getPdfUrls();
	
	@SqlQuery("select url from "+TABLE_PDF+" where cherokee")
	List<String> getCherokeePdfUrls();
	
	@SqlQuery("select url from "+TABLE_PDF+" where cherokee is NULL")
	List<String> getUnknownPdfUrls();

	static class Instance {
		private final static String dbFile = "./db" + File.separator + "htmlCache";
		private final static String options = ";AUTO_SERVER=TRUE"; // ";FILE_LOCK=SOCKET";
		private static CacheDao dao;
		private static JdbcConnectionPool cp;

		public static CacheDao getCacheDao() {
			if (dao == null) {
				cp = JdbcConnectionPool.create("jdbc:h2:" + dbFile + options, "SA", "");
				ConnectionFactory connectionFactory = new ConnectionFactory() {
					@Override
					public Connection openConnection() throws SQLException {
						return cp.getConnection();
					}
				};
				Jdbi jdbi = Jdbi.create(connectionFactory);
				jdbi.installPlugin(new SqlObjectPlugin());
				jdbi.installPlugin(new H2DatabasePlugin());
				dao = jdbi.onDemand(CacheDao.class);
				dao.init();
			}
			return dao;
		}
	}
}
